class Pair{
    int first;
    int second;
    public Pair(int first,int second){
        this.first = first;
        this.second = second;
    }
}
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>((x,y)-> x.first-y.first);
        int[] distance = new int[V];
        Arrays.fill(distance,Integer.MAX_VALUE);
        
        distance[S]=0;
        pq.add(new Pair(0,S));
        
        while(!pq.isEmpty()){
            int dis = pq.peek().first;
            int node = pq.peek().second;
            pq.remove();
            
            for(int i=0;i< adj.get(node).size();i++){
                
                int adjNode = adj.get(node).get(i).get(0);
                int wt = adj.get(node).get(i).get(1);
                if(dis + wt <= distance[adjNode]){
                    distance[adjNode] = dis + wt;
                    pq.add(new Pair(dis+wt,adjNode));
                }
            }
        }
        return distance; 
    }
}
